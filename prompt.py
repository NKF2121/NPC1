import streamlit as st
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

st.set_page_config(page_title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", layout="centered")
st.title("üêæ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á & ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Å‡∏ô X/Y")

# URLs ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
image_urls = {
    "‡∏™‡∏∏‡∏ô‡∏±‡∏Ç": "https://upload.wikimedia.org/wikipedia/commons/b/bf/Bulldog_inglese.jpg",
    "‡πÅ‡∏°‡∏ß": "https://cdn.britannica.com/39/226539-050-D21D7721/Portrait-of-a-cat-with-whiskers-visible.jpg",
    "‡πÅ‡∏°‡∏ß‡∏™‡∏π‡∏á‡∏ß‡∏±‡∏¢": "https://vetmarlborough.co.nz/wp-content/uploads/old-cats.jpg"
}

# ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL
@st.cache_data
def load_image(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return Image.open(BytesIO(response.content)).convert("RGB")
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

# ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô X/Y ‡∏ï‡∏£‡∏á‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û
def draw_axes(image, step=50):
    draw = ImageDraw.Draw(image)
    width, height = image.size
    font = ImageFont.load_default()

    # ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô X (‡∏ö‡∏ô)
    for x in range(0, width, step):
        draw.line([(x, 0), (x, 10)], fill="red", width=1)
        draw.text((x + 2, 2), str(x), fill="red", font=font)

    # ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô Y (‡∏ã‡πâ‡∏≤‡∏¢)
    for y in range(0, height, step):
        draw.line([(0, y), (10, y)], fill="blue", width=1)
        draw.text((2, y + 2), str(y), fill="blue", font=font)

    return image

# ‡πÅ‡∏™‡∏î‡∏á thumbnails + ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
st.markdown("### üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û")
cols = st.columns(len(image_urls))
selected = None

for i, (label, url) in enumerate(image_urls.items()):
    with cols[i]:
        image = load_image(url)
        if image:
            st.image(image.resize((150, 100)), caption=label)
            if st.button(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {label}", key=label):
                selected = label

# ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° resize + ‡πÅ‡∏Å‡∏ô
if selected:
    st.markdown(f"### üì∏ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: **{selected}**")
    image = load_image(image_urls[selected])
    if image:
        orig_w, orig_h = image.size
        st.write(f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {orig_w} x {orig_h} px")

        # sliders ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
        new_w = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (px)", 50, orig_w * 2, orig_w)
        new_h = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (px)", 50, orig_h * 2, orig_h)

        # resize ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô
        resized = image.resize((new_w, new_h))
        image_with_axes = draw_axes(resized.copy(), step=50)

        st.image(image_with_axes, caption=f"{new_w} x {new_h} px ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Å‡∏ô X/Y", use_container_width=False)

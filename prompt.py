import streamlit as st
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

st.set_page_config(page_title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", layout="centered")
st.title("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á")

# URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
image_urls = {
    "‡∏™‡∏∏‡∏ô‡∏±‡∏Ç": "https://upload.wikimedia.org/wikipedia/commons/b/bf/Bulldog_inglese.jpg",
    "‡πÅ‡∏°‡∏ß": "https://cdn.britannica.com/39/226539-050-D21D7721/Portrait-of-a-cat-with-whiskers-visible.jpg",
    "‡πÅ‡∏°‡∏ß‡∏™‡∏π‡∏á‡∏ß‡∏±‡∏¢": "https://vetmarlborough.co.nz/wp-content/uploads/old-cats.jpg"
}

# ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
def load_image(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return Image.open(BytesIO(response.content)).convert("RGB")
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {e}")
        return None

# ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô X ‡πÅ‡∏•‡∏∞ Y ‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ
def draw_axes(image, step=50):
    draw = ImageDraw.Draw(image)
    width, height = image.size
    font = ImageFont.load_default()

    # ‡πÅ‡∏Å‡∏ô X (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
    for x in range(0, width, step):
        draw.line([(x, 0), (x, height)], fill=(255, 0, 0), width=1)
        draw.text((x + 2, 2), str(x), fill=(255, 0, 0), font=font)

    # ‡πÅ‡∏Å‡∏ô Y (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
    for y in range(0, height, step):
        draw.line([(0, y), (width, y)], fill=(0, 0, 255), width=1)
        draw.text((2, y + 2), str(y), fill=(0, 0, 255), font=font)

    return image

# ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
cols = st.columns(len(image_urls))
selected = None

for i, (label, url) in enumerate(image_urls.items()):
    with cols[i]:
        img = load_image(url)
        if img:
            if st.button(label):
                selected = label
            st.image(img.resize((150, 100)), caption=label)

# ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
if selected:
    st.subheader(f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected}")
    img = load_image(image_urls[selected])
    if img:
        orig_w, orig_h = img.size
        st.write(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {orig_w} x {orig_h} px")

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
        new_w = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (px)", 50, orig_w * 2, orig_w)
        new_h = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (px)", 50, orig_h * 2, orig_h)

        resized = img.resize((new_w, new_h))

        # ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô
        image_with_axes = draw_axes(resized.copy(), step=50)

        st.write(f"üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà: {new_w} x {new_h} px ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Å‡∏ô X/Y ‡∏ó‡∏∏‡∏Å 50px")
        st.image(image_with_axes, use_container_width=False)

import tensorflow as tf
import numpy as np
from PIL import Image
from PIL import ImageEnhance
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import requests
from io import BytesIO
# ---------------------------
# ฟังก์ชันโหลดภาพจาก URL
# ---------------------------
def load_image_from_url(url):
  response = requests.get(url, stream=True)
  if "image" not in response.headers.get("content-type", ""):
      raise ValueError("URL does not contain a valid image.")
  try:
      img = Image.open(BytesIO(response.content)).convert("RGB")
      return np.array(img)
  except Exception as e:
      raise ValueError(f"Error loading image: {e}")
def show_image(image, title_image="Show Image"):
  plt.title(title_image)
  plt.imshow(image)
  plt.show()
# Load model
model = MobileNetV2(weights="imagenet")
# ==== Sample image collection (many entries possible) ====
sample_images = {
    "Dog": "https://images.unsplash.com/photo-1552053831-71594a27632d?q=80&w=3062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "Bicycle": "https://plus.unsplash.com/premium_photo-1663091740058-b07d3f6832c2?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "Cat": "https://plus.unsplash.com/premium_photo-1677181729163-33e6b59d5c8f?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "Car": "https://images.unsplash.com/photo-1533473359331-0135ef1b58bf?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "Mountain": "https://images.unsplash.com/photo-1465056836041-7f43ac27dcb5?q=80&w=2942&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "Benz": "https://vehicle-images.dealerinspire.com/6bfa-11000684/WDDHF5KB3EA884195/f7babbf9aef39ec989ac4cd76e7c13d4.jpg"
}
from skimage.transform import resize

image = load_image_from_url(sample_images["Dog"])
show_image(image, title_image="Original image size")

# Preprocess image
image_resized = resize(image, (224, 224), anti_aliasing=True)
image_resized = (image_resized * 255).astype(np.uint8)
#or
#image_resized = tf.image.resize(image, (224, 224)).numpy()

show_image(image_resized, title_image="Input to MobileNetV2")

img_array = np.array(image_resized)
img_array_expanded = np.expand_dims(img_array, axis=0)
processed_img = preprocess_input(img_array_expanded)


# Predict
predictions = model.predict(processed_img)
decoded_preds = decode_predictions(predictions, top=5)[0]

print("### Predictions:")
for i, (imagenet_id, label, prob) in enumerate(decoded_preds):
  print(f"**{i+1}. {label}** ({prob*100:.2f}%)")
